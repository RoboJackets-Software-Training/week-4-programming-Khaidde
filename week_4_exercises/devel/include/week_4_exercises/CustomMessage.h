// Generated by gencpp from file week_4_exercises/CustomMessage.msg
// DO NOT EDIT!


#ifndef WEEK_4_EXERCISES_MESSAGE_CUSTOMMESSAGE_H
#define WEEK_4_EXERCISES_MESSAGE_CUSTOMMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace week_4_exercises
{
template <class ContainerAllocator>
struct CustomMessage_
{
  typedef CustomMessage_<ContainerAllocator> Type;

  CustomMessage_()
    : cosine()
    , sine()  {
    }
  CustomMessage_(const ContainerAllocator& _alloc)
    : cosine(_alloc)
    , sine(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cosine_type;
  _cosine_type cosine;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _sine_type;
  _sine_type sine;





  typedef boost::shared_ptr< ::week_4_exercises::CustomMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::week_4_exercises::CustomMessage_<ContainerAllocator> const> ConstPtr;

}; // struct CustomMessage_

typedef ::week_4_exercises::CustomMessage_<std::allocator<void> > CustomMessage;

typedef boost::shared_ptr< ::week_4_exercises::CustomMessage > CustomMessagePtr;
typedef boost::shared_ptr< ::week_4_exercises::CustomMessage const> CustomMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::week_4_exercises::CustomMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::week_4_exercises::CustomMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::week_4_exercises::CustomMessage_<ContainerAllocator1> & lhs, const ::week_4_exercises::CustomMessage_<ContainerAllocator2> & rhs)
{
  return lhs.cosine == rhs.cosine &&
    lhs.sine == rhs.sine;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::week_4_exercises::CustomMessage_<ContainerAllocator1> & lhs, const ::week_4_exercises::CustomMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace week_4_exercises

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::week_4_exercises::CustomMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::week_4_exercises::CustomMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::week_4_exercises::CustomMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ac03ac2f5c36d972264c4781c378a8f";
  }

  static const char* value(const ::week_4_exercises::CustomMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ac03ac2f5c36d97ULL;
  static const uint64_t static_value2 = 0x2264c4781c378a8fULL;
};

template<class ContainerAllocator>
struct DataType< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "week_4_exercises/CustomMessage";
  }

  static const char* value(const ::week_4_exercises::CustomMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 cosine\n"
"std_msgs/Float64 sine\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::week_4_exercises::CustomMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cosine);
      stream.next(m.sine);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::week_4_exercises::CustomMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::week_4_exercises::CustomMessage_<ContainerAllocator>& v)
  {
    s << indent << "cosine: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cosine);
    s << indent << "sine: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.sine);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEEK_4_EXERCISES_MESSAGE_CUSTOMMESSAGE_H
